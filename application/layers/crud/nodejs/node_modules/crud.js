const AWS = require("aws-sdk");
const DynamoDB = new AWS.DynamoDB.DocumentClient();

const TableName = process.env.TABLE_NAME;

const responseHandler = methodCode => (err, data) => {
    if (err) {
        console.error(`ERR::DB::${methodCode} => `, JSON.stringify(err));
    } else {
        console.log(`OK::DB::${methodCode} => `, JSON.stringify(data));
        return data;
    }
}

exports.createItem = Item => DynamoDB.put({TableName,Item}, responseHandler('CREATE'));
exports.readItem = async Key => await DynamoDB.get({TableName,Key}).promise();
exports.deleteItem = Key => DynamoDB.delete({TableName,Key}, responseHandler('DELETE'));

exports.updateItem = (Key, updateMap) => {
    const normalizeField = fieldName => `:${fieldName.replace(/[^a-zA-Z]/g, '')}`;
    const ReturnValues = "UPDATED_NEW";

    const UpdateExpression = `SET ${Object.entries(updateMap)
        .map(([field, _]) => `${field}=${normalizeField(field)}`).join(', ')
        }`;
    const ExpressionAttributeValues = Object.assign(...Object.entries(updateMap)
        .map(([field, value]) => ({ [normalizeField(field)]: value })));

    return DynamoDB.update({TableName,Key,UpdateExpression,ExpressionAttributeValues,ReturnValues}, responseHandler('UPDATE'));
}
